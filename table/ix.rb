require './opcode.rb'

class Table
  class IX
    TABLE = [
      # 0x0N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('add IX,bc'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,

      # 0x1N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('add IX,de'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,

      # 0x2N
      nil,
      Opcode.new('ld IX,xx', step: 3),
      Opcode.new('ld (xx),IX', step: 3),
      Opcode.new('inc IX'),
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('add IX,IX'),
      Opcode.new('ld IX,(xx)', step: 3),
      Opcode.new('dec IX'),
      nil,
      nil,
      nil,
      nil,

      #0x3N
      nil,
      nil,
      nil,
      nil,
      Opcode.new('inc (IX+d)'),
      Opcode.new('dec (IX+d)'),
      Opcode.new('ld (IX+d),x', step: 2),
      nil,
      nil,
      Opcode.new('add IX,sp'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,

      #0x4N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('ld b,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('ld c,(IX+d)'),
      nil,

      #0x5N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('ld d,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('ld e,(IX+d)'),
      nil,

      #0x6N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('ld h,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('ld l,(IX+d)'),
      nil,

      #0x7N
      Opcode.new('ld (IX+d),b'),
      Opcode.new('ld (IX+d),c'),
      Opcode.new('ld (IX+d),d'),
      Opcode.new('ld (IX+d),e'),
      Opcode.new('ld (IX+d),h'),
      Opcode.new('ld (IX+d),l'),
      nil,
      Opcode.new('ld (IX+d),a'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('ld a,(IX+d)'),
      nil,

      #0x8N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('add a,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('adc a,(IX+d)'),
      nil,

      #0x9N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('sub (IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('sbc a,(IX+d)'),
      nil,

      #0xAN
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('and (IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('xor (IX+d)'),
      nil,

      #0xBN
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('or (IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('cp (IX+d)'),
      nil,

      #0xCN
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('IX BIT'),
      nil,
      nil,
      nil,
      nil,

      #0xDN
      nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,

      #0xEN
      nil,
      Opcode.new('pop IX'),
      nil,
      Opcode.new('ex (sp),IX'),
      nil,
      Opcode.new('push IX'),
      nil,
      nil,
      nil,
      Opcode.new('jp (IX)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,

      #0xFN
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('ld sp,IX'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
    ].freeze

    def self.opcode(instruction)
      TABLE[instruction]
    end
  end
end
