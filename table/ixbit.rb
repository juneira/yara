require './opcode.rb'

class Table
  class IXBit
    TABLE = [
      #0x0N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('rlc (IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('rrc (IX+d)'),
      nil,

      #0x1N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('rl (IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('rr (IX+d)'),
      nil,

      #0x2N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('sla (IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('sra (IX+d)'),
      nil,

      #0x3N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('srl (IX+d)'),
      nil,

      #0x4N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('bit 0,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('bit 1,(IX+d)'),
      nil,

      #0x5N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('bit 2,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('bit 3,(IX+d)'),
      nil,

      #0x6N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('bit 4,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('bit 5,(IX+d)'),
      nil,

      #0x7N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('bit 6,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('bit 7,(IX+d)'),
      nil,

      #0x8N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('res 0,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('res 1,(IX+d)'),
      nil,

      #0x9N
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('res 2,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('res 3,(IX+d)'),
      nil,

      #0xAN
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('res 4,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('res 5,(IX+d)'),
      nil,

      #0xBN
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('res 6,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('res 7,(IX+d)'),
      nil,

      #0xCN
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('set 0,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('set 1,(IX+d)'),
      nil,

      #0xDN
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('set 2,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('set 3,(IX+d)'),
      nil,

      #0xEN
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('set 4,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('set 5,(IX+d)'),
      nil,

      #0xFN
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('set 6,(IX+d)'),
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      nil,
      Opcode.new('set 7,(IX+d)'),
      nil,
    ].freeze

    def self.opcode(instruction)
      TABLE[instruction]
    end
  end
end
